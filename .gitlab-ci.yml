#image: bioconductor/bioconductor_full:release
image: rocker/tidyverse:3.6.1

stages:
  - check
  - vignette
  - codecov
  - build
  - deploy

variables:
  _R_CHECK_CRAN_INCOMING_: "false"
  _R_CHECK_FORCE_SUGGESTS_: "true"

before_script:
  - echo "options('repos' = 'https://ftp.fau.de/cran/')" >> /usr/local/lib/R/etc/Rprofile.site
  - apt-get install libjpeg-dev -y --no-install-recommends # dependency of qpdf
  - R -e "devtools::install_deps(pkg = '.', upgrade = 'always')"
  - R -e "devtools::install_dev_deps(pkg = '.', upgrade = 'always')"

check_package:
  stage: check
  script:
    - R -e "devtools::check(pkg = '.', args = c('--no-clean'), build_args = c('--no-build-vignettes'), check_dir = '.')"
  artifacts:
    paths:
      - "*.Rcheck"
    when: always # always upload check artifacts, even if job fails!
    expire_in: 1 month

#check_errors:
#  stage: check
#  script:
#    - R -e "if (!identical(devtools::check(pkg = '.', document = FALSE, args = c('--no-tests', '--no-vignettes'))[['errors']], character(0))) stop('Check with Errors')"

#check_warnings:
#  stage: check
#  script:
#    - R -e "if (!identical(devtools::check(pkg = '.', document = FALSE, args = c('--no-tests', '--no-vignettes')))[['warnings']], character(0))) stop('Check with Warnings')"

#check_notes:
#  stage: check
#  script:
#    - R -e "if (!identical(devtools::check(pkg = '.', document = FALSE, args = c('--no-tests', '--no-vignettes')))[['notes']], character(0))) stop('Check with Notes')"

compile_vignette:
  stage: vignette
  script:
    - R -e "devtools::build_vignettes(pkg = '.', clean = FALSE)"
  artifacts:
    paths:
      - "vignettes/sigident-Howto_Microarray.HTML"
      - "vignettes/csv"
      - "vignettes/plot"
    expire_in: 1 month

codecoverage:
  stage: codecov
  script:
    - R -e 'covr::codecov()'

build_source:
  stage: build
  script:
    - R -e "devtools::build(pkg = '.', binary = FALSE, vignettes = FALSE)"

build_binary:
  stage: build
  script:
    - R -e "devtools::build(pkg = '.', binary = TRUE, vignettes = FALSE)"

install:
  stage: deploy
  script:
    - R -e "devtools::install(pkg = '.')"
